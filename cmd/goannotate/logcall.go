package main

/*
const commentTemplateText = `DO NOT EDIT, AUTO GENERATED BY {{.Tag}} {{.Date}}`
const callTemplateText = `
{{.Indent}}defer {{.Func}}({{.Context}}, "{{.Name}}", "{{.Location}}", {{.Params}})({{.Context}}, {{.Results}})`

var callTemplate = template.Must(template.New("call").Parse(callTemplateText))
var commentTemplate = template.Must(template.New("comment").Parse(commentTemplateText))

func quote(s string) string {
	return `"` + s + `"`
}

func flatten(format string, args []string) string {
	if len(args) == 0 {
		return format
	}
	return format + ", " + strings.Join(args, ", ")
}

func isEmpty(decl *ast.FuncDecl) bool {
	return len(decl.Body.List) == 0
}

func alreadyAnnotated(ac *AnnotationConfig, fset *token.FileSet, file *ast.File, fn *types.Func, decl *ast.FuncDecl, comment string) bool {
	if isEmpty(decl) {
		return false
	}
	deferStmt, ok := decl.Body.List[0].(*ast.DeferStmt)
	if !ok {
		return false
	}
	cmap := ast.NewCommentMap(fset, file, file.Comments)
	comments := cmap[deferStmt]
	commentNL := comment + "\n"
	for _, c := range comments {
		fmt.Printf("CO: __%v__ == __%v__\n", c.Text(), comment)
		if c := c.Text(); c == comment || c == commentNL {
			return true
		}
	}
	return false
}

func annotationForFunc(ac *AnnotationConfig, fset *token.FileSet, fn *types.Func, decl *ast.FuncDecl) (string, string, error) {
	sig := fn.Type().(*types.Signature)
	var ignore []int
	ctxParam, hasContext := annotations.HasCustomContext(sig, ac.ContextType)
	if hasContext {
		ignore = append(ignore, 0)
	}
	params, paramArgs := annotations.ArgsForParams(sig, ignore...)
	results, resultArgs := annotations.ArgsForResults(sig)
	if !hasContext {
		ctxParam = "nil"
	}
	call, comment := &strings.Builder{}, &strings.Builder{}
	pos := fset.Position(decl.Pos())
	parent, base := filepath.Base(filepath.Dir(pos.Filename)), filepath.Base(pos.Filename)
	location := fmt.Sprintf("%s%c%s:%d", parent, filepath.Separator, base, pos.Line)
	data := struct {
		Indent   string
		Context  string
		Name     string
		Location string
		Func     string
		Params   string
		Results  string
		Tag      string
		Date     string
	}{
		Indent:   "  ",
		Context:  ctxParam,
		Name:     fn.Pkg().Path() + "." + fn.Name(),
		Location: location,
		Func:     ac.Function,
		Params:   flatten(quote(params), paramArgs),
		Results:  flatten(quote(results), resultArgs),
		Tag:      ac.Tag,
		Date:     time.Now().Format(time.RFC3339),
	}
	if err := callTemplate.Execute(call, data); err != nil {
		return "", "", err
	}
	if err := commentTemplate.Execute(comment, data); err != nil {
		return "", "", err
	}
	return call.String(), comment.String(), nil
}
*/
