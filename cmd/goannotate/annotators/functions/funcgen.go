// Copyright 2020 cloudeng llc. All rights reserved.
// Use of this source code is governed by the Apache-2.0
// license that can be found in the LICENSE file.

package functions

import (
	"fmt"
	"go/ast"
	"go/token"
	"go/types"
	"sort"
	"strings"

	"cloudeng.io/cmdutil/flags"
	"cloudeng.io/cmdutil/structdoc"
	"cloudeng.io/go/cmd/goannotate/annotators/internal"
	"gopkg.in/yaml.v2"
)

var (
	generators = map[string]CallGenerator{}
)

// EssentialOptions represents the configuration options required for all
// function generators.
type EssentialOptions struct {
	Type         string `yaml:"type" annotator:"name of annotator type."`
	ImportPath   string `yaml:"importPath" annotator:"import path for the logging function."`
	FunctionName string `yaml:"functionName" annotator:"name of the function to be invoked."`
}

// RegisterCallGenerator registers a new function call generator.
func RegisterCallGenerator(callGenerator CallGenerator) {
	generators[structdoc.TypeName(callGenerator)] = callGenerator
}

// CallGenerators lists all of the available CallGenerators.
func CallGenerators() []string {
	cg := []string{}
	for k := range generators {
		cg = append(cg, k)
	}
	sort.Strings(cg)
	return cg
}

// Lookup returns the CallGenerator, if any, with the specified type.
func Lookup(typeName string) CallGenerator {
	return generators[typeName]
}

// CallGenerator represents the ability to generate code for a function call
// using arguments taken from a function call signature.
type CallGenerator interface {
	// UnmarshalYAML unmarshals the annotator's yaml configuration.
	UnmarshalYAML(buf []byte) error
	// Import returns the import path for the function to be generated by
	// Generate.
	Import() string
	// Generate creates the appropriate call code and import path for
	// the function to be used as an annotation.
	Generate(*token.FileSet, *types.Func, *ast.FuncDecl) (string, error)
	// Describe returns a description for the function annotation.
	Describe() string
}

// Spec represents the yaml configuration for a function call
// generator.
type Spec struct {
	yaml.MapSlice
	Type string `yaml:"type"`
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (s *Spec) UnmarshalYAML(unmarshal func(interface{}) error) error {
	if err := internal.DelegatedYAML(s, unmarshal); err != nil {
		return err
	}
	if !flags.AllSet(s.Type) {
		return fmt.Errorf("Type not set")
	}
	generator := generators[s.Type]
	if generator == nil {
		return fmt.Errorf("failed to find a function call generator for %s", s.Type)
	}
	return internal.RemarshalYAML(s.MapSlice, generator.UnmarshalYAML)
}

func quote(s string) string {
	return `"` + s + `"`
}

func flatten(format string, args []string) string {
	if len(args) == 0 {
		return format
	}
	return format + ", " + strings.Join(args, ", ")
}
